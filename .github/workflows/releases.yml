#
# This action will:
# Build python wheels
# Build libraries
# Publish a release in GitHub
# Publish to pypi
# Publish to crates.io
#
# This file contains parts autogenerated by maturin v1.7.2
#
#    maturin generate-ci github --platform manylinux macos
#
name: Releasev2

on:
  push:
    tags:
      - "v*"  
  workflow_dispatch:

permissions:
  contents: read  
  

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  build_linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
#          - runner: ubuntu-latest
#            target: aarch64
#          - runner: ubuntu-latest
#            target: armv7
#          - runner: ubuntu-latest
#            target: ppc64le
    steps:                  
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build linux wheels
        uses: PyO3/maturin-action@v1        
        with:
          target: ${{ matrix.platform.target }}
          args: --release --all-features --out dist -i 3.9 3.10 3.11 3.12 3.13
          manylinux: auto

      - name: Upload linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

      - name: Build linux C and Rust libraries      
        run: |
          # Fix permissions- output files from maturn-action end up owned by root
          # so lets change them back to root:root
          sudo chown -R runner:docker .
         
          export TAG="$(git describe --tags)"
          echo "TAG=$TAG"

          # determine which target cpus for rustc to build for from machine type
          export ARCH="$(uname -m)"
          case $ARCH in
            x86_64)
              if [[ "$OSTYPE" == "linux-gnu"* ]]; then
                export TARGETS="x86-64 x86-64-v2 x86-64-v3"
              else
                export TARGETS="x86-64"
              fi
              ;;            
            *) echo "unknown arch (uname -m) $ARCH"; exit 1 ;;
          esac

          # determine which library file extensions to include in archive from kernel
          export KERNEL="$(uname -s | tr '[:upper:]' '[:lower:]')"
          case $KERNEL in            
            linux*) export LIB_GLOB="{a,so}" ;;
            *) echo "unknown kernel (uname -s) $KERNEL"; exit 1 ;;
          esac        

          for TARGET in $TARGETS; do            
            echo "building kernel-target $KERNEL-$TARGET"
            export RUSTFLAGS="-C target-cpu=$TARGET"          
            
            # Build C objects
            cargo build --release --features cfitsio-static,examples

            # Create new release asset tarballs
            # Get some debug            
            ls -la target/release
            ls -la include
            ls -la .

            eval mv target/release/libmwalib.${LIB_GLOB} include/mwalib.h .
            eval tar -acvf mwalib-${TAG}-${KERNEL}-${TARGET}.tar.gz \
                LICENSE LICENSE-cfitsio README.md CHANGELOG.md \
                libmwalib.${LIB_GLOB} mwalib.h          
          done

      - name: Upload linux tarball
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.platform.target }}.tar.gz
          path: "*.tar.gz"
          if-no-files-found: error

  build_macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform: # see https://github.com/actions/runner-images?tab=readme-ov-file#available-images for runner types
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
          - runner: macos-15
            target: aarch64
    steps:      
      - name: Checkout repository
        uses: actions/checkout@v4      
      
      - name: Install automake and autoconf        
        run: |
          brew install automake autoconf

      - name: Build macos wheels
        uses: PyO3/maturin-action@v1        
        with:
          target: ${{ matrix.platform.target }}
          args: --release --all-features --out dist -i 3.9 3.10 3.11 3.12 3.13         

      - name: Upload macos wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}
          path: dist

      - name: Build C and Rust libraries
        run: |                  
          export TAG="$(git describe --tags)"
          echo "TAG=$TAG"

          # determine which target cpus for rustc to build for from machine type
          export ARCH="$(uname -m)"
          case $ARCH in
            x86_64)              
              export TARGET="x86-64";;
            arm64) export TARGET="arm64";;
            *) echo "unknown arch (uname -m) $ARCH"; exit 1 ;;
          esac

          # determine which library file extensions to include in archive from kernel
          export KERNEL="$(uname -s | tr '[:upper:]' '[:lower:]')"
          case $KERNEL in
            darwin*) export LIB_GLOB="{a,dylib}" ;;
            linux*) export LIB_GLOB="{a,so}" ;;
            *) echo "unknown kernel (uname -s) $KERNEL"; exit 1 ;;
          esac
                              
          echo "building kernel-target $KERNEL-$TARGET"
          export RUSTFLAGS="-C target-cpu=$TARGET"          
          
          # Build C objects
          cargo build --release --features examples,cfitsio-static

          # Get some debug            
          ls -la target/release
          ls -la include
          ls -la .

          # Create new release asset tarballs
          eval mv target/release/libmwalib.${LIB_GLOB} include/mwalib.h .
          eval tar -acvf mwalib-${TAG}-${KERNEL}-${TARGET}.tar.gz \
              LICENSE LICENSE-cfitsio README.md CHANGELOG.md \
              libmwalib.${LIB_GLOB} mwalib.h          

      - name: Upload macos tarball
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.runner }}-${{ matrix.platform.target }}.tar.gz
          path: "*.tar.gz"
          if-no-files-found: error

  create-github-release:
    name: Create a new github release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: [build_linux, build_macos]    
    environment: CI
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true     

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        shell: bash
        run: |
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --generate-notes *.tar.gz

  pypi_release:
    name: PyPi Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: [create-github-release]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*

  rust_release:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: [create-github-release]
    environment: CI
    steps:
        - name: Checkout sources
          uses: actions/checkout@v4

        - name: Install stable, minimal toolchain
          uses: dtolnay/rust-toolchain@v1
          with:
            toolchain: stable

        - name: Run tests on latest stable rust
          run: cargo build --release --features cfitsio-static,examples

        - uses: katyo/publish-crates@v2
          with:
              registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
              args: --no-verify
